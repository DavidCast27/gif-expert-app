{"version":3,"sources":["components/AddCategory/index.jsx","components/GifGridItem/index.jsx","api/getGifs.js","hooks/useFetchGifs.js","components/GifGrid/index.jsx","components/App/index.jsx","serviceWorker.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","console","log","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","id","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGrid","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4SAkCeA,MA9Bf,YAAuC,IAAjBC,EAAgB,EAAhBA,cAAgB,EACAC,mBAAS,IADT,mBAC7BC,EAD6B,KACjBC,EADiB,KAepC,OACE,0BAAMC,UAAU,cAAcC,SATX,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAIP,GACTA,EAAWQ,OAAOC,OAAS,IAC5BX,GAAc,SAAAY,GAAU,OAAKV,GAAL,mBAAoBU,OAC5CT,EAAc,OAKd,2BACEU,KAAK,OACLC,MAAOZ,EACPa,SAjBoB,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAC1Bb,EAAca,EAAOF,YCKVG,G,MAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAWC,GAAU,EAAdC,GAAc,EAAVD,KAE9B,OACI,yBAAKf,UAAU,iDACX,yBAAKiB,IAAMF,EAAMG,IAAMJ,IACvB,+BAAKA,EAAL,Q,uBCRCK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,yDAC4CO,UAAWF,GADvD,sDAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACHb,GAAIa,EAAIb,GACRF,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QARnB,kBAWZY,GAXY,4CAAH,sDCsBLK,EAlBM,SAACZ,GAAc,IAAD,EACLvB,mBAAS,CAC/B6B,KAAK,GACLO,SAAS,IAHkB,mBACxBC,EADwB,KACjBC,EADiB,KAe/B,OATAC,qBAAU,WACNjB,EAAUC,GACLiB,MAAM,SAAAP,GAAM,OAAIK,EACb,CACIT,KAAMI,EACNG,SAAS,SAGtB,CAACb,IACGc,G,MCcII,MA3Bf,YAAiC,IAAblB,EAAY,EAAZA,SAAY,EAEGY,EAAaZ,GAAjCU,EAFiB,EAEtBJ,KAAaO,EAFS,EAETA,QAErB,OACE,kBAAC,WAAD,KACE,wBAAIjC,UAAU,qCAAd,IAAqDoB,GACpDa,EAAU,uBAAGjC,UAAU,oCAAb,eACT,yBAAKA,UAAU,WACd8B,GACCA,EAAOF,KAAK,SAAAC,GAAG,OACb,kBAAC,EAAD,eACEU,IAAKV,EAAIb,IACJa,U,MCSJW,MAvBf,WAAgB,IAAD,EAEuB3C,mBAAS,CAAC,cAFjC,mBAENW,EAFM,KAEMZ,EAFN,KAIb,OACE,yBAAKI,UAAU,OACb,4CACA,kBAAC,EAAD,CACAJ,cAAeA,IACf,6BAEEY,GAAe,4BAEbA,EAAWoB,KAAI,SAACR,EAAUmB,GAAX,OACb,kBAAC,EAAD,CAASA,IAAKA,EAAKnB,SAAUA,UCPrBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.55947e56.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction AddCategory({setCategories}) {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleChangeValue = ({target}) => {\n    setInputValue(target.value);\n  } \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(inputValue)\n    if(inputValue.trim().length > 2) {\n      setCategories(categories => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  }\n  return (\n    <form className=\"AddCategory\" onSubmit={handleSubmit }>\n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={handleChangeValue}\n      />\n    </form>  \n  );\n}\n\nAddCategory.propTypes = {\n  setCategories:PropTypes.func.isRequired \n}\n\nexport default AddCategory;\n","import React from 'react';\r\nimport './GifGridItem.scss';\r\n\r\nconst GifGridItem = ({ title, id, url }) => {\r\n    \r\n    return (\r\n        <div className='GifGridItem animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=5&q=${ encodeURI( category ) }&api_key=WVrZXHcoE1WcY1bfNPNN2084h4AJi4Hg`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n    return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n    }\r\n    })\r\n    return gifs;\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../api/getGifs';\r\n\r\n\r\nconst useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true        \r\n    });\r\n    \r\n    useEffect(() => {\r\n        getGifs ( category )\r\n            .then( images => setState(\r\n                {\r\n                    data: images,\r\n                    loading: false\r\n                }\r\n            ));\r\n    }, [category])\r\n    return state;\r\n}\r\n\r\nexport default useFetchGifs","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport GifGridItem from '../GifGridItem';\nimport useFetchGifs from '../../hooks/useFetchGifs';\nimport './GifGrid.scss'\n\nfunction GifGrid ({ category }) {\n\n  const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <Fragment>\n      <h3 className='animate__animated animate__fadeIn'> { category }</h3>\n      {loading ? <p className='animate__animated animate__flash'>Cargando...</p> :\n        <div className='GifGrid'>\n        {images && \n          images.map( img =>( \n            <GifGridItem\n              key={img.id}\n              { ...img}\n              />\n          ))\n        }\n      </div>\n      }\n    </Fragment>\n  );\n}\n\nGifGrid.propTypes = {\n  category:PropTypes.string.isRequired \n}\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from '../AddCategory';\nimport GifGrid from '../GifGrid';\nimport './App.css';\n\nfunction App() {\n\n  const [categories, setCategories] = useState(['One Punch'])\n\n  return (\n    <div className=\"App\">\n      <h2>GifExpertApp</h2>\n      <AddCategory \n      setCategories={setCategories}  />\n      <hr />\n      {\n        categories &&  <ol>\n        {\n          categories.map((category, key) =>(\n            <GifGrid key={key} category={category} />\n          ))\n        }\n        </ol>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}